//project setup
npx create-next-app@latest finance-visualizer --typescript --tailwind --eslint
cd finance-visualizer
npx shadcn-ui@latest init
npm install recharts @heroicons/react mongoose @hookform/resolvers zod
//mangodb setup
import mongoose from 'mongoose';

declare global {
  var mongoose: any;
}

const MONGODB_URI = process.env.MONGODB_URI!;

if (!MONGODB_URI) throw new Error('Missing MongoDB URI');

let cached = global.mongoose;
if (!cached) cached = global.mongoose = { conn: null, promise: null };

async function dbConnect() {
  if (cached.conn) return cached.conn;
  
  if (!cached.promise) {
    cached.promise = mongoose.connect(MONGODB_URI).then(mongoose => mongoose);
  }

  cached.conn = await cached.promise;
  return cached.conn;
}

export default dbConnect;
//data models
// Transaction.ts
import { Schema, model } from 'mongoose';

const TransactionSchema = new Schema({
  amount: { type: Number, required: true },
  date: { type: Date, default: Date.now },
  description: String,
  category: { type: String, enum: ['Food', 'Housing', 'Transport', 'Entertainment', 'Utilities'] },
  type: { type: String, enum: ['expense', 'income'] }
});

export default model('Transaction', TransactionSchema);
// Budget.ts
import { Schema, model } from 'mongoose';

const BudgetSchema = new Schema({
  category: { type: String, required: true },
  limit: { type: Number, required: true },
  month: { type: Number, required: true },
  year: { type: Number, required: true }
});

export default model('Budget', BudgetSchema);
//api routes
// app/api/transactions/route.ts
import { NextResponse } from 'next/server';
import Transaction from '@/models/Transaction';
import dbConnect from '@/lib/db';

export async function GET() {
  await dbConnect();
  const transactions = await Transaction.find().sort({ date: -1 });
  return NextResponse.json(transactions);
}

export async function POST(request: Request) {
  await dbConnect();
  const body = await request.json();
  const transaction = await Transaction.create(body);
  return NextResponse.json(transaction);
}
//core componenets
// components/TransactionForm.tsx
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import { Form, FormControl, FormField, FormItem } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger } from '@/components/ui/select';

const formSchema = z.object({
  amount: z.number().positive(),
  description: z.string().min(2),
  category: z.enum(['Food', 'Housing', 'Transport', 'Entertainment', 'Utilities']),
  type: z.enum(['expense', 'income'])
});

export function TransactionForm() {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema)
  });

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    // API call to create transaction
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField control={form.control} name="amount" render={({ field }) => (
          <FormItem>
            <FormControl>
              <Input type="number" placeholder="Amount" {...field} />
            </FormControl>
          </FormItem>
        )}/>
        {/* Other form fields */}
        <Button type="submit">Add Transaction</Button>
      </form>
    </Form>
  );
}
//data visualisation
// components/MonthlyChart.tsx
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';

export function MonthlyChart({ data }: { data: { month: string; total: number }[] }) {
  return (
    <BarChart width={500} height={300} data={data}>
      <CartesianGrid strokeDasharray="3 3" />
      <XAxis dataKey="month" />
      <YAxis />
      <Tooltip />
      <Bar dataKey="total" fill="#8884d8" />
    </BarChart>
  );
}
//dashboard layout
// app/dashboard/page.tsx
import { Card, CardHeader, CardContent } from '@/components/ui/card';
import { RecentTransactions } from '@/components/RecentTransactions';
import { MonthlyChart } from '@/components/MonthlyChart';
import { CategoryPieChart } from '@/components/CategoryPieChart';

export default function Dashboard() {
  return (
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
      <Card className="col-span-4">
        <CardHeader>
          <h2 className="text-xl font-semibold">Monthly Overview</h2>
        </CardHeader>
        <CardContent>
          <MonthlyChart data={monthlyData} />
        </CardContent>
      </Card>

      <Card className="col-span-2">
        <CardHeader>Category Breakdown</CardHeader>
        <CardContent>
          <CategoryPieChart data={categoryData} />
        </CardContent>
      </Card>

      <Card className="col-span-2">
        <CardHeader>Recent Transactions</CardHeader>
        <CardContent>
          <RecentTransactions transactions={recentTransactions} />
        </CardContent>
      </Card>
    </div>
  );
}
//key features implementation
//responsive design
<div className="flex flex-col md:flex-row gap-4">
  <div className="w-full md:w-1/3">
    <TransactionForm />
  </div>
  <div className="w-full md:w-2/3">
    <MonthlyChart />
  </div>
</div>
//error handling
// components/ErrorBoundary.tsx
'use client';

import { useEffect } from 'react';

export default function ErrorBoundary({ error }: { error: Error }) {
  return (
    <div className="p-4 bg-red-100 text-red-700 rounded-lg">
      <h2 className="font-bold">Error!</h2>
      <p>{error.message}</p>
    </div>
  );
}
//deployment
MONGODB_URI=mongodb+srv://<user>:<password>@cluster.mongodb.net/finance?retryWrites=true&w=majority
vercel deploy --prod
